__version__ = (7, 7, 7)
# meta developer: @shadow_mod777
#         ‚ï≠‚ïê‚ïê‚Ä¢ ‡≥ã‚Ä¢‚úß‡πë‚ô°‡πë‚úß‚Ä¢‡≥ã ‚Ä¢‚ïê‚ïê‚ïÆ
#                  @Yaukais
#               ‚ïî‚ïê‚ïê‚ïó‚ïî‚ïó ‚ô° ‚ô° ‚ô°
#               ‚ïö‚ïó‚ïî‚ïù‚ïë‚ïë‚ïî‚ïê‚ï¶‚ï¶‚ï¶‚ïî‚ïó
#               ‚ïî‚ïù‚ïö‚ïó‚ïë‚ïë‚ïî‚ïê‚ï¶‚ï¶‚ï¶‚ïî‚ïó
#               ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ï©‚ïê‚ï©‚ïê‚ï©‚ïê‚ïù
#                   ‚ïî‚ïê‚ïê‚ïê‚ïó‚ô™
#                   ‚ïë‚ñà‚ñà‚ñà‚ïë ‚ô´
#                   ‚ïë(‚óè)‚ïë‚ô´
#                   ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ô™
#              ‡Æú€û‡Æú YOU ‡Æú€û‡Æú
#              ‚û∫íã®MùôÄ∆¨ùôÑ”®RíÜô‚û§
#         ‚ï∞‚ïê‚ïê‚Ä¢ ‡≥ã‚Ä¢‚úß‡πë‚ô°‡πë‚úß‚Ä¢‡≥ã ‚Ä¢‚ïê‚ïê‚ïØ

import asyncio
import re
from hikkatl.types import Message
from .. import loader, utils
from telethon import events
from telethon.tl import types
from datetime import datetime, timedelta

@loader.tds
class ShadowMute(loader.Module):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ."""
    strings = {
        "name": "ShadowMute",
        "add_chat": "‚úÖ | –≠—Ç–æ—Ç —á–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–ª—è –º—É—Ç–∞.",
        "remove_chat": "üóëÔ∏è | –≠—Ç–æ—Ç —á–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–ª—è –º—É—Ç–∞.",
        "current_chats": "‚öôÔ∏è | –¢–µ–∫—É—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –º—É—Ç–∞: {}",
        "args_required_mute": "üö´ | –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–∏–æ–¥ –º—É—Ç–∞.",
        "user_not_found": "üö´ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "time_format_error": "üö´ | –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <—á–∏—Å–ª–æ>[s/m/h/d].",
        "real_muted": "üîá | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {}.",
        "not_in_allowed_chat": "üö´ | –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö.",
        "already_muted": "‚ö†Ô∏è | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {}.",
        "unmuted": "üîì | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
        "admin_error": "üö´ | –£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    }

    def __init__(self):
        self.allowed_chats = set()
        self.muted_users = {}  # {chat_id: {user_id: until_datetime}}

    @loader.command(ru_doc="–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–ª—è –º—É—Ç–∞.")
    async def shaddchat(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–ª—è –º—É—Ç–∞."""
        chat_id = message.chat_id
        if chat_id not in self.allowed_chats:
            self.allowed_chats.add(chat_id)
            await utils.answer(message, self.strings("add_chat"))
        else:
            self.allowed_chats.discard(chat_id)
            await utils.answer(message, self.strings("remove_chat"))

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –º—É—Ç–∞.")
    async def shlistchats(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –º—É—Ç–∞."""
        chats = "\n".join(map(str, self.allowed_chats)) if self.allowed_chats else "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤."
        await utils.answer(message, self.strings("current_chats").format(chats))

    def parse_time(self, time_str: str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ timedelta."""
        match = re.match(r"(\d+)([smhd])", time_str.lower())
        if not match:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        value = int(match.group(1))
        unit = match.group(2)
        if unit == 's':
            return timedelta(seconds=value)
        elif unit == 'm':
            return timedelta(minutes=value)
        elif unit == 'h':
            return timedelta(hours=value)
        elif unit == 'd':
            return timedelta(days=value)
        raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏")

    @loader.command(
        ru_doc="<@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> <–≤—Ä–µ–º—è> - –í—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        args="<@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> <–≤—Ä–µ–º—è>"
    )
    async def shsmute(self, message: Message):
        """–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if message.chat_id not in self.allowed_chats:
            await utils.answer(message, self.strings("not_in_allowed_chat"))
            return

        args = utils.get_args(message)
        if len(args) < 2:
            await utils.answer(message, self.strings("args_required_mute"))
            return

        user_arg = args[0]
        time_arg = args[1]

        user = None
        try:
            user = await self._client.get_entity(user_arg)
        except ValueError:
            pass  
        if not user:
            await utils.answer(message, self.strings("user_not_found"))
            return

        chat_id = message.chat_id
        user_id = user.id

        try:
            mute_duration = self.parse_time(time_arg)
            until = datetime.now() + mute_duration
            until_timestamp = int(until.timestamp())
        except ValueError:
            await utils.answer(message, self.strings("time_format_error"))
            return

        if chat_id not in self.muted_users:
            self.muted_users[chat_id] = {}

        if user_id in self.muted_users[chat_id] and self.muted_users[chat_id][user_id] > datetime.now():
            await utils.answer(message, self.strings("already_muted").format(utils.escape_html(user.first_name) if user.first_name else utils.escape_html(user.username) if user.username else user.id, self.muted_users[chat_id][user_id].strftime("%Y-%m-%d %H:%M:%S")))
            return

        try:
            await self._client.edit_permissions(
                chat_id,
                user_id,
                until_date=until_timestamp,
                send_messages=False
            )
            self.muted_users[chat_id][user_id] = until
            await utils.answer(message, self.strings("real_muted").format(utils.escape_html(user.first_name) if user.first_name else utils.escape_html(user.username) if user.username else user.id, self.format_timedelta(mute_duration)))
        except Exception as e:
            await utils.answer(message, self.strings("admin_error"))
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    def format_timedelta(self, delta: timedelta):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timedelta –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
        parts = []
        if delta.days > 0:
            parts.append(f"{delta.days} –¥.")
        hours = delta.seconds // 3600
        if hours > 0:
            parts.append(f"{hours} —á.")
        minutes = (delta.seconds % 3600) // 60
        if minutes > 0:
            parts.append(f"{minutes} –º–∏–Ω.")
        seconds = delta.seconds % 60
        if seconds > 0 and not parts:
            parts.append(f"{seconds} —Å–µ–∫.")
        return " ".join(parts) or "–º–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã"

    @loader.command(ru_doc="<@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> - –°–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    async def shunsmute(self, message: Message):
        """–°–Ω—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if message.chat_id not in self.allowed_chats:
            await utils.answer(message, self.strings("not_in_allowed_chat"))
            return

        args = utils.get_args(message)
        if not args:
            await utils.answer(message, self.strings("args_required_mute").split()[0])  # –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω—É–∂–µ–Ω
            return

        user = None
        try:
            user = await self._client.get_entity(args[0])
        except ValueError:
            pass

        if not user:
            await utils.answer(message, self.strings("user_not_found"))
            return

        chat_id = message.chat_id
        user_id = user.id

        if chat_id in self.muted_users and user_id in self.muted_users[chat_id]:
            del self.muted_users[chat_id][user_id]
            try:
                await self._client.edit_permissions(
                    chat_id,
                    user_id,
                    send_messages=True
                )
                await utils.answer(message, self.strings("unmuted").format(utils.escape_html(user.first_name) if user.first_name else utils.escape_html(user.username) if user.username else user.id))
            except Exception as e:
                await utils.answer(message, self.strings("admin_error"))
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            await utils.answer(message, f"‚ö†Ô∏è | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {utils.escape_html(user.first_name) if user.first_name else utils.escape_html(user.username) if user.username else user.id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
