__version__ = (8, 1, 2)
# meta developer: @Shadow_red1, @dream23041
# change-log: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ GitHub

from .. import loader, utils
import asyncio
import random
import aiohttp
import io
import inspect
from telethon.tl.types import Message

class BGS_Ultimate(loader.Module):
    """üöÄ –ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç –¥–ª—è BGS –±–æ—Ç–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏, –∫–∞–∑–∏–Ω–æ –∏ –≥–æ–Ω–∫–∞–º–∏"""
    
    strings = {
        "name": "BGS Ultimate",
        "start_info": """
üéÆ <b>BGS Bot Control Panel</b>

<u>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</u>
<code>.bgs start</code> - –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∏–¥–µ–æ
<code>.bgs work</code> - –∞–≤—Ç–æ—Ä–∞–±–æ—Ç–∞
<code>.bgs bonus</code> - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
<code>.bgs stop</code> - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
<code>.bgs update</code> - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

<u>–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</u>
<code>.bgs ref</code> - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
<code>.bgs casino [—Å—Ç–∞–≤–∫–∞]</code> - –∏–≥—Ä–∞ –≤ –∫–∞–∑–∏–Ω–æ
<code>.bgs race [—Å—Ç–∞–≤–∫–∞]</code> - —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–Ω–∫–∞—Ö
<code>.bgs hate [@user]</code> - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ö–µ–π—Ç–µ—Ä–æ–≤

<u>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</u>
<code>.bgs profile</code> - –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
<code>.bgs balance</code> - –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
""",
        "work_started": "üîÑ –ê–≤—Ç–æ-—Ä–∞–±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞",
        "work_stopped": "‚èπ –ê–≤—Ç–æ-—Ä–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "video_started": "üé• –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω (—Ç–∏–ø: {})",
        "video_stopped": "‚èπ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        "casino_win": "üéâ –í—ã–∏–≥—Ä—ã—à: {}üí∞ (x{})",
        "casino_lose": "üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: {}üí∞",
        "ref_info": "üìä –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {}\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {}",
        "error": "‚ùå –û—à–∏–±–∫–∞: {}",
        "fetch_failed": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å GitHub",
        "actual_version": "‚úÖ –£ –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {version}",
        "old_version": "üîî –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!\n–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version}\n–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_version}\n",
        "update_whats_new": "üìù –ß—Ç–æ –Ω–æ–≤–æ–≥–æ: {whats_new}\n",
        "update_command": "üîÑ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>{update_command}</code>"
    }

    def __init__(self):
        self._bot = "@bgs2_bot"
        self._running = False
        self._work_loop = False
        self._video_loop = False
        self._bonus_loop = False
        self._current_conv = None
        self._ref_link = None
        self._ref_count = 0

        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "button_index",
                0,
                "–¢–∏–ø –≤–∏–¥–µ–æ: 0-–ò–≥—Ä—ã 1-–≠–¥–∏—Ç 2-–§–∏–ª—å–º—ã 3-–†–µ–∞–∫—Ü–∏–∏ 4-–ù–∞—Ä–µ–∑–∫–∏ 5-–ú–µ–º—ã",
                validator=loader.validators.Integer(minimum=0, maximum=5)
            ),
            loader.ConfigValue(
                "hire_editor",
                1,
                "–£—Ä–æ–≤–µ–Ω—å –º–æ–Ω—Ç–∞–∂–µ—Ä–∞ (0-9)",
                validator=loader.validators.Integer(minimum=0, maximum=9)
            ),
            loader.ConfigValue(
                "buy_computer",
                1,
                "–£—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (0-4)",
                validator=loader.validators.Integer(minimum=0, maximum=4)
            ),
            loader.ConfigValue(
                "subscribe_plan",
                1,
                "–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω (0-6)",
                validator=loader.validators.Integer(minimum=0, maximum=6)
            ),
            loader.ConfigValue(
                "message_value",
                1000,
                "–ë—é–¥–∂–µ—Ç –Ω–∞ –≤–∏–¥–µ–æ (1-30000)",
                validator=loader.validators.Integer(minimum=1, maximum=30000)
            ),
            loader.ConfigValue(
                "repeat_count",
                30,
                "–ú–∏–Ω—É—Ç –Ω–∞ –º–æ–Ω—Ç–∞–∂ (1-120)",
                validator=loader.validators.Integer(minimum=1, maximum=120)
            ),
            loader.ConfigValue(
                "auto_work_enabled",
                True,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "buy_adrenaline",
                1,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞",
                validator=loader.validators.Integer(minimum=0)
            ),
            loader.ConfigValue(
                "buy_coffee",
                1,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ñ–µ",
                validator=loader.validators.Integer(minimum=0)
            ),
            loader.ConfigValue(
                "daily_bonus_enabled",
                True,
                "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "auto_ref",
                True,
                "–ê–≤—Ç–æ-—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "casino_strategy",
                "conservative",
                "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–∞–∑–∏–Ω–æ: conservative/aggressive",
                validator=loader.validators.Choice(["conservative", "aggressive"])
            ),
            loader.ConfigValue(
                "race_bet",
                5000,
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –≥–æ–Ω–∫–∏",
                validator=loader.validators.Integer(minimum=0)
            ),
            loader.ConfigValue(
                "max_hate",
                10,
                "–ú–∞–∫—Å. —Ö–µ–π—Ç–µ—Ä–æ–≤ –∑–∞ —Ä–∞–∑",
                validator=loader.validators.Integer(minimum=1, maximum=100)
            )
        )

    async def client_ready(self, client, db):
        self._client = client
        if self.config["auto_ref"]:
            async with self._client.conversation(self._bot, exclusive=False) as conv:
                await conv.send_message("–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã")
                response = await conv.get_response()
                if "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:" in response.text:
                    self._ref_link = response.text.split("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:")[1].strip()
                    self._ref_count = int(response.text.split("–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:")[1].split()[0])

    async def _safe_send(self, conv, text, delay=2):
        try:
            await conv.send_message(text)
            await asyncio.sleep(delay)
            return True
        except Exception as e:
            print(f"[BGS] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False

    async def _edit_or_reply(self, message: Message, text: str):
        try:
            await message.edit(text)
        except:
            await message.reply(text)

    async def bgsupdatecmd(self, message: Message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–æ–¥—É–ª—è BGS Ultimate"""
        module_name = "BGS_Ultimate"
        module = self.lookup(module_name)
        if not module:
            await self._edit_or_reply(message, self.strings["error"].format("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"))
            return

        sys_module = inspect.getmodule(module)
        local_file = io.BytesIO(sys_module.__loader__.data)
        local_file.name = f"{module_name}.py"
        local_file.seek(0)
        local_first_line = local_file.readline().strip().decode("utf-8")

        correct_version = sys_module.__version__
        correct_version_str = ".".join(map(str, correct_version))

        async with aiohttp.ClientSession() as session:
            async with session.get("https://raw.githubusercontent.com/Viciu3/shadow_mod/refs/heads/main/BGS_Ultimate.py") as response:
                if response.status == 200:
                    remote_content = await response.text()
                    remote_lines = remote_content.splitlines()
                    new_version = remote_lines[0].split("=", 1)[1].strip().strip("() Gandalf").replace(",", "").replace(" ", ".")
                    what_new = remote_lines[2].split(":", 1)[1].strip() if len(remote_lines) > 2 and remote_lines[2].startswith("# change-log:") else ""
                else:
                    await self._edit_or_reply(message, self.strings["fetch_failed"])
                    return

        if local_first_line.replace(" ", "") == remote_lines[0].strip().replace(" ", ""):
            await self._edit_or_reply(message, self.strings["actual_version"].format(version=correct_version_str))
        else:
            update_message = self.strings["old_version"].format(version=correct_version_str, new_version=new_version)
            if what_new:
                update_message += self.strings["update_whats_new"].format(whats_new=what_new)
            update_message += self.strings["update_command"].format facility: .format(update_command=f"{self.get_prefix()}dlm https://raw.githubusercontent.com/Viciu3/shadow_mod/refs/heads/main/BGS_Ultimate.py")
            await self._edit_or_reply(message, update_message)

    async def bgscmd(self, message: Message):
        """–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è BGS –±–æ—Ç–æ–º"""
        args = utils.get_args_raw(message)
        
        if not args:
            await self._edit_or_reply(message, self.strings["start_info"])
            return

        if args == "start":
            await self._start_video(message)
        elif args == "work":
            await self._start_work(message)
        elif args == "stop":
            await self._stop_all(message)
        elif args == "ref":
            await self._show_ref(message)
        elif args.startswith("casino"):
            await self._play_casino(message)
        elif args.startswith("race"):
            await self._start_race(message)
        elif args.startswith("hate"):
            await self._send_hate(message)
        elif args == "profile":
            await self._show_profile(message)
        elif args == "balance":
            await self._show_balance(message)
        elif args == "bonus":
            await self._get_bonus(message)
        elif args == "update":
            await self.bgsupdatecmd(message)

    async def _start_video(self, message: Message):
        if self._video_loop:
            await self._edit_or_reply(message, "‚ö†Ô∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self._video_loop = True
        button_names = ["–ò–≥—Ä—ã", "–≠–¥–∏—Ç", "–§–∏–ª—å–º—ã", "–†–µ–∞–∫—Ü–∏–∏", "–ù–∞—Ä–µ–∑–∫–∏", "–ú–µ–º—ã"]
        
        try:
            async with self._client.conversation(self._bot, exclusive=False) as conv:
                self._current_conv = conv
                
                await self._edit_or_reply(
                    message,
                    self.strings["video_started"].format(button_names[self.config["button_index"]])
                )

                while self._video_loop:
                    if self.config["hire_editor"] > 0:
                        if not await self._safe_send(conv, f"–ù–∞–Ω—è—Ç—å –º–æ–Ω—Ç–∞–∂–µ—Ä–∞ {self.config['hire_editor']}", 3):
                            break
                    
                    if self.config["subscribe_plan"] > 0:
                        if not await self._safe_send(conv, f"–û—Ñ–æ—Ä–º–∏—Ç—å —Ç–∞—Ä–∏—Ñ {self.config['subscribe_plan']}", 3):
                            break
                    
                    if self.config["buy_computer"] > 0:
                        if not await self._safe_send(conv, f"–ö—É–ø–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä {self.config['buy_computer']}", 3):
                            break

                    if not await self._safe_send(conv, "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", 3):
                        break
                        
                    try:
                        response = await conv.get_response()
                        await response.click(self.config["button_index"])
                    except Exception as e:
                        await self._edit_or_reply(message, f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}")
                        break

                    if not await self._safe_send(conv, str(self.config["message_value"]), 3):
                        break
                        
                    for _ in range(3):
                        if not await self._safe_send(conv, str(self.config["repeat_count"]), 3):
                            break

                    await asyncio.sleep(420)

        except Exception as e:
            await self._edit_or_reply(message, self.strings["error"].format(str(e)))
        finally:
            self._video_loop = False
            if self._current_conv:
                await self._current_conv.cancel()
            self._current_conv = None
            await self._edit_or_reply(message, self.strings["video_stopped"])

    async def _start_work(self, message: Message):
        if not self.config["auto_work_enabled"]:
            await self._edit_or_reply(message, "üö´ –ê–≤—Ç–æ-—Ä–∞–±–æ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return

        if self._work_loop:
            await self._edit_or_reply(message, "‚ö†Ô∏è –ê–≤—Ç–æ-—Ä–∞–±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return

        self._work_loop = True
        await self._edit_or_reply(message, self.strings["work_started"])

        try:
            async with self._client.conversation(self._bot, exclusive=False) as conv:
                self._current_conv = conv
                
                if self.config["buy_coffee"] > 0:
                    if not await self._safe_send(conv, f"–ö—É–ø–∏—Ç—å –∫–æ—Ñ–µ {self.config['buy_coffee']}"):
                        return
                
                if self.config["buy_adrenaline"] > 0:
                    if not await self._safe_send(conv, f"–ö—É–ø–∏—Ç—å –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω {self.config['buy_adrenaline']}"):
                        return

                if not await self._safe_send(conv, "–ü–æ–π—Ç–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É"):
                    return
                
                await conv.get_response()

                while self._work_loop:
                    if not await self._safe_send(conv, "–ú–æ—è —Ä–∞–±–æ—Ç–∞"):
                        break
                    
                    response = await conv.get_response()
                    work_info = response.raw_text

                    if "üò¥–£—Å—Ç–∞–ª–æ—Å—Ç—å:" in work_info:
                        try:
                            fatigue = int(work_info.split("üò¥–£—Å—Ç–∞–ª–æ—Å—Ç—å:")[1].split("%")[0].strip())
                            if fatigue >= 80:
                                await self._edit_or_reply(message, f"üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å {fatigue}%, –ø—Ä–µ–∫—Ä–∞—â–∞—é —Ä–∞–±–æ—Ç—É")
                                await response.click(0)
                                break
                        except:
                            pass

                    await asyncio.sleep(300)

        except Exception as e:
            await self._edit_or_reply(message, self.strings["error"].format(str(e)))
        finally:
            self._work_loop = False
            if self._current_conv:
                await self._current_conv.cancel()
            self._current_conv = None
            await self._edit_or_reply(message, self.strings["work_stopped"])

    async def _stop_all(self, message: Message):
        self._running = False
        self._work_loop = False
        self._video_loop = False
        self._bonus_loop = False
        
        if self._current_conv:
            try:
                await self._current_conv.cancel()
            except:
                pass
            self._current_conv = None
            
        await self._edit_or_reply(message, "üõë –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    async def _show_ref(self, message: Message):
        if not self._ref_link:
            await self._edit_or_reply(message, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        earned = self._ref_count * 12000
        await self._edit_or_reply(
            message,
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{self._ref_link}\n\n" + 
            self.strings["ref_info"].format(self._ref_count, earned)
        )

    async def _play_casino(self, message: Message):
        args = utils.get_args_raw(message).replace("casino", "").strip()
        if not args:
            await self._edit_or_reply(message, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: .bgs casino 1000)")
            return

        try:
            bet = int(args) if args != "all" else None
            async with self._client.conversation(self._bot, exclusive=False) as conv:
                if bet is None:
                    await conv.send_message("–±")
                    balance = await conv.get_response()
                    bet = int(balance.text.split("–î–µ–Ω—å–≥–∏:")[1].split("üí∞")[0].strip())

                await conv.send_message(f"–ö–∞–∑–∏–Ω–æ {bet}")
                response = await conv.get_response()
                
                if "–≤—ã–∏–≥—Ä–∞–ª" in response.text:
                    multiplier = float(response.text.split("x")[1].split()[0])
                    won = int(bet * multiplier)
                    await self._edit_or_reply(message, self.strings["casino_win"].format(won, multiplier))
                else:
                    await self._edit_or_reply(message, self.strings["casino_lose"].format(bet))

        except Exception as e:
            await self._edit_or_reply(message, self.strings["error"].format(str(e)))

    async def _start_race(self, message: Message):
        args = utils.get_args_raw(message).replace("race", "").strip()
        bet = int(args) if args else self.config["race_bet"]

        try:
            async with self._client.conversation(self._bot, exclusive=False) as conv:
                await conv.send_message(f"–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–Ω–∫–µ {bet}")
                response = await conv.get_response()
                await self._edit_or_reply(message, f"üèéÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏:\n{response.text}")

        except Exception as e:
            await self._edit_or_reply(message, self.strings["error"].format(str(e)))

    async def _send_hate(self, message: Message):
        args = utils.get_args_raw(message).replace("hate", "").strip()
        if not args:
            await self._edit_or_reply(message, "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: .bgs hate @username)")
            return

        try:
            count = min(self.config["max_hate"], 10)
            async with self._client.conversation(self._bot, exclusive=False) as conv:
                await conv.send_message(f"–ó–∞—Ö–µ–π—Ç–∏—Ç—å {args} {count}")
                response = await conv.get_response()
                await self._edit_or_reply(message, f"üí¢ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{response.text}")

        except Exception as e:
            await self._edit_or_reply(message, self.strings["error"].format(str(e)))

    async def _show_profile(self, message: Message):
        try:
            async with self._client.conversation(self._bot, exclusive=False) as conv:
                await conv.send_message("–ü—Ä–æ—Ñ–∏–ª—å")
                response = await conv.get_response()
                await self._edit_or_reply(message, f"üìÑ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n{response.text}")

        except Exception as e:
            await self._edit_or_reply(message, self.strings["error"].format(str(e)))

    async def _show_balance(self, message: Message):
        try:
            async with self._client.conversation(self._bot, exclusive=False) as conv:
                await conv.send_message("–±")
                response = await conv.get_response()
                await self._edit_or_reply(message, f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>\n{response.text}")

        except Exception as e:
            await self._edit_or_reply(message, self.strings["error"].format(str(e)))

    async def _get_bonus(self, message: Message):
        if not self.config["daily_bonus_enabled"]:
            await self._edit_or_reply(message, "üö´ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç–∫–ª—é—á–µ–Ω")
            return

        try:
            async with self._client.conversation(self._bot, exclusive=False) as conv:
                await conv.send_message("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")
                response = await conv.get_response()
                await self._edit_or_reply(message, f"üéÅ <b>–ë–æ–Ω—É—Å:</b>\n{response.text}")

        except Exception as e:
            await self._edit_or_reply(message, self.strings["error"].format(str(e)))
