# –î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –±—ã–ª —Å–¥–µ–ª–∞–Ω –¥–ª—è –≥–∏–ª—å–¥–∏–∏ Meteor
# –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∫–∞—Ä–∞–µ—Ç—Å—è -rep.
# –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞—Å–ø–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –º–æ–¥—É–ª—å.
# –ü—Ä–æ–¥–∞–∂–∞ –º–æ–¥—É–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞.
# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∏–ª—å–¥–∏—è–º–∏!
# –ó–∞ —Ä–æ—Å–ø–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥—É–ª—è _rip(√ó_√ó) ak tg –±—É–¥–µ—Ç 
# Developer: @Yaukais, @Shadow_red1, @dream23041

__version__ = (7, 7, 7)  # meta developer: @Yaukais, @Shadow_red1, @dream23041

import asyncio
from telethon.tl.types import Message
from telethon import events
from .. import loader, utils
from telethon import functions, types
from ..inline.types import InlineCall

class GIBFGBMod(loader.Module):
    strings = {"name": "GIBFGB"}

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
    config = loader.ModuleConfig(
        loader.ConfigValue(
            "chat_id",
            -4536633154,  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "ID —á–∞—Ç–∞ –≥–∏–ª—å–¥–∏–∏ !!!",
            validator=loader.validators.Integer(),
        )
    )
    
    _bot = "@bfgbunker_bot"    
    confirmation_chat_id = None  # ID —á–∞—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        
    async def client_ready(self):
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        self.confirmation_chat, _ = await utils.asset_channel(
            self._client,
            "Bfgbunker - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            "–≠—Ç–æ—Ç —á–∞—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ–∫—É–ø–æ–∫ –æ—Ç –º–æ–¥—É–ª—è Bfgb.",
            silent=True,
            archive=False,
            _folder="hikka",
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        self.confirmation_chat_id = self.confirmation_chat.id

    async def atakcmd(self, message: Message):
        """–ö—É–ø–∏—Ç—å –∞—Ç–∞–∫—É."""
        args = utils.get_args(message)
        amount = args[0] if args else "1"  # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        order_message = f"–ö—É–ø–∏—Ç—å –∞—Ç–∞–∫—É {amount}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
        await self.client.send_message(self.config["chat_id"], order_message)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç
        confirmation_message = f"–í—ã –∫—É–ø–∏–ª–∏ –∞—Ç–∞–∫—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}"
        await self.client.send_message(self.confirmation_chat_id, confirmation_message)
        
    async def defcmd(self, message: Message):
        """–ö—É–ø–∏—Ç—å –∑–∞—â–∏—Ç—É."""
        args = utils.get_args(message)
        amount = args[0] if args else "1"  # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        order_message = f"–ö—É–ø–∏—Ç—å –∑–∞—â–∏—Ç—É {amount}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
        await self.client.send_message(self.config["chat_id"], order_message)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç
        confirmation_message = f"–í—ã –∫—É–ø–∏–ª–∏ –∑–∞—â–∏—Ç—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}"
        await self.client.send_message(self.confirmation_chat_id, confirmation_message)

    async def btcmd(self, message: Message):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–≤–æ–≥–æ –±—É–Ω–∫–µ—Ä–∞"""

        async with self._client.conversation(self._bot) as conv:
            await conv.send_message("–ë—É–Ω–∫–µ—Ä")
            response = await conv.get_response()

            info_text = response.raw_text
            nick_start = info_text.find("üôé‚Äç‚ôÇÔ∏è")
            nick_end = info_text.find("\n", nick_start)  
            nick = info_text[nick_start+4:nick_end].strip()  
            bottles_text = info_text.split("–ë—É—Ç—ã–ª–æ–∫:")[1].split()[0].strip()
            bottles = int("".join(filter(str.isdigit, bottles_text)))
            bottles = "{:,}".format(int(bottles)).replace(",", ".")
            money_parts = info_text.split("–ë–∞–ª–∞–Ω—Å:")[1].split()[0].strip().split('/')
            formatted_money = f"{money_parts[0]}/{money_parts[1]}"
            people = int("".join(filter(str.isdigit, info_text.split("–õ—é–¥–µ–π –≤ –±—É–Ω–∫–µ—Ä–µ:")[1].split('\n')[0].strip())))
            people_in_line = int("".join(filter(str.isdigit, info_text.split("–õ—é–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ –≤ –±—É–Ω–∫–µ—Ä:")[1].split('/')[0].strip())))
            max_people = int("".join(filter(str.isdigit, info_text.split("–ú–∞–∫—Å. –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ª—é–¥–µ–π:")[1].split()[0].strip())))
            profit_start = info_text.find("üíµ")
            profit_end = info_text.find("\n", profit_start)  
            profit = info_text[profit_start+1:profit_end].strip()  

            formatted_info = f'''üôé‚Äç‚ôÇÔ∏è {nick}\n\nüçæ <b>–ë—É—Ç—ã–ª–æ–∫:</b> {bottles}\nüí∞ <b>–ö—Ä—ã—à–µ–∫:</b> {formatted_money} –∫—Ä.\n\nüßç <b>–õ—é–¥–µ–π –≤ –±—É–Ω–∫–µ—Ä–µ:</b> {people}\n     ‚Ü≥<b>–õ—é–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏:</b> {people_in_line}\n\n<code>–ú–∞–∫—Å. —á–µ–ª–æ–≤–µ–∫: </code>{max_people}\n\nüíµ <b>{profit}</b> '''

            await message.edit(formatted_info) 
            
    async def g5cmd(self, message: Message):
        """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ 5%"""

        reply = await message.get_reply_message()
        if not reply:
            await message.edit("<b>–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—É—Ç—ã–ª–∫–∞—Ö!</b>")
            return

        args = message.text.split()
        if len(args) > 1:
            try:
                multiplier = float(args[1])
            except ValueError:
                await message.edit("<b>–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>")
                return
        else:
            multiplier = 1.2

        self.result_list = []
        self.monday_bottles_list = []  
        self.five_percent_bonus_list = [] 
        self.total_bottles = 0
        self.total_five_percent_bonus = 0  
        self.total_monday_bottles = 0
        for line in reply.text.splitlines():
            if " - " in line:
                parts = line.split(" - ")
                nick = parts[0].strip()
                
                bottles_str = parts[1].strip()[:-1]  
                bottles_str = bottles_str.replace('.', '')  
                bottles = int(bottles_str)  
                bottles = bottles // 10
                self.total_bottles += bottles 
                bottles_str = self.format_number(bottles)
                self.result_list.append(f"{nick} - {bottles_str} üçæ")

                monday_bottles = int(bottles * multiplier)
                self.total_monday_bottles += monday_bottles
                monday_bottles_str = self.format_number(monday_bottles)
                self.monday_bottles_list.append(f"{nick} - {monday_bottles_str} üçæ")

                five_percent_bonus = int(monday_bottles / 20)
                five_percent_bonus_str = self.format_number(five_percent_bonus)
                self.five_percent_bonus_list.append(f"{nick} - {five_percent_bonus_str} üçæ")
                self.total_five_percent_bonus += five_percent_bonus
                
        self.total_bottles_str = self.format_number(self.total_bottles) 
        self.total_five_percent_bonus_str = self.format_number(self.total_five_percent_bonus)  
        self.total_monday_bottles_str = self.format_number(self.total_monday_bottles)
        
        result_message = f"<blockquote>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∏–ª—å–¥–∏–∏ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:</blockquote>\n\n"
        result_message += "\n".join(self.result_list)
        result_message += f"\n\n<blockquote><b>üóí–í—Å–µ–≥–æ –±—É—Ç—ã–ª–æ–∫:</b> {self.total_bottles_str} üçæ</blockquote>"  

        await self.inline.form(
            text=result_message,
            message=message,
            reply_markup=[
                [
                    {
                        "text": "–ü—Ä–æ—Ü–µ–Ω—Ç—ã",
                        "callback": self.five_percent
                    },
                    {
                        "text": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",            
                        "callback": self.monday
                    }
                ]
            ]
        )

    async def five_percent(self, call: InlineCall):
        result_message = f"<blockquote>5% –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n\n"
        result_message += "\n".join(self.five_percent_bonus_list)
        result_message += f"\n\n<b>üóí–í—Å–µ–≥–æ –±—É—Ç—ã–ª–æ–∫ –≤ 5% ‚Äî</b> {self.total_five_percent_bonus_str} üçæ</blockquote>" 
        await call.edit(result_message, reply_markup=[
            [
                {
                    "text": "–ù–∞–∑–∞–¥",
                    "callback": self.back  
                }
            ]
        ])

    async def monday(self, call: InlineCall):
        result_message = f"<blockquote>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n\n"
        result_message += "\n".join(self.monday_bottles_list)
        result_message += f"\n\n<b>üóí–í—Å–µ–≥–æ –±—É—Ç—ã–ª–æ–∫ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî</b> {self.total_monday_bottles_str} üçæ</blockquote>" 
        await call.edit(result_message, reply_markup=[
            [
                {
                    "text": "–ù–∞–∑–∞–¥",
                    "callback": self.back  
                }
            ]
        ])

    async def back(self, call: InlineCall):
        result_message = f"<blockquote>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∏–ª—å–¥–∏–∏ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"
        result_message += "\n".join(self.result_list)
        result_message += f"\n\n<b>üóí–í—Å–µ–≥–æ –±—É—Ç—ã–ª–æ–∫:</b> {self.total_bottles_str} üçæ</blockquote>" 
        await call.edit(result_message, reply_markup=[
            [
                {
                    "text": "–ü—Ä–æ—Ü–µ–Ω—Ç—ã",
                    "callback": self.five_percent
                },
                {
                    "text": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",            
                    "callback": self.monday
                }
            ]
        ])

    def format_number(self, number):
        number_str = str(number)
        result = []
        for i in range(len(number_str) - 1, -1, -3):
            result.append(number_str[max(0, i - 2):i + 1])
        return ".".join(reversed(result))

class GuildAttacker(loader.Module):
    def __init__(self):
        self._sending = False
        self._task = None
        self.chat_id = None  # Ensure chat_id is initialized

    async def gncmd(self, message: Message):
        """Initiate or stop an attack on the guild"""
        if not self._sending:
            self._sending = True
            self._task = asyncio.create_task(self._send_attack_message())
            await message.respond("–ù–∞—á–∏–Ω–∞—é –Ω–∞–ø–∞–¥–µ–Ω–∏–µ –Ω–∞ –≥–∏–ª—å–¥–∏—é!")
        else:
            self._sending = False
            if self._task:
                self._task.cancel()
                try:
                    await self._task  # Wait for the task to finish
                except asyncio.CancelledError:
                    pass
                self._task = None
            await message.respond("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–∞–¥–µ–Ω–∏–µ –Ω–∞ –≥–∏–ª—å–¥–∏—é!")

    async def _send_attack_message(self):
        while self._sending:
            await utils.get_bot().send_message(self.chat_id, "–ù–∞–ø–∞—Å—Ç—å –Ω–∞ –≥–∏–ª—å–¥–∏—é")
            await asyncio.sleep(2)  # Interval between messages