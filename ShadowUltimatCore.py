import json
import os
import pathlib
import re
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class ShadowUltimatCore:
    def __init__(self, bot, config, strings, lock):
        self.bot = bot
        self.config = config
        self.strings = strings
        self._lock = lock  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        self._pause_event = asyncio.Event()
        self._pause_event.set()
        self._resources_map = {
            range(0, 500): "–∫–∞—Ä—Ç–æ—à–∫–∞",
            range(501, 2000): "–º–æ—Ä–∫–æ–≤—å",
            range(2001, 10000): "—Ä–∏—Å",
            range(10001, 25000): "—Å–≤–µ–∫–ª–∞",
            range(25001, 60000): "–æ–≥—É—Ä–µ—Ü",
            range(60001, 100000): "—Ñ–∞—Å–æ–ª—å",
            range(100001, 10**50): "–ø–æ–º–∏–¥–æ—Ä",
        }
        self._command_map = {
            "–∫–∞—Ä—Ç–æ—à–∫–∞": "–∫–∞—Ä—Ç–æ—à–∫–∞",
            "–º–æ—Ä–∫–æ–≤—å": "–º–æ—Ä–∫–æ–≤—å",
            "—Ä–∏—Å": "—Ä–∏—Å",
            "—Å–≤–µ–∫–ª–∞": "—Å–≤–µ–∫–ª–∞",
            "–æ–≥—É—Ä–µ—Ü": "–æ–≥—É—Ä–µ—Ü",
            "—Ñ–∞—Å–æ–ª—å": "—Ñ–∞—Å–æ–ª—å",
            "–ø–æ–º–∏–¥–æ—Ä": "–ø–æ–º–∏–¥–æ—Ä",
        }
        self.regexes = {
            "balance": r"üí∞\s*–ë–∞–ª–∞–Ω—Å:\s*(?:<b>)?([\d,]+/[\d,]+)(?:</b>)?\s*–∫—Ä\.",
            "bottles": r"(?:üçæ|ü•Ç)\s*–ë—É—Ç—ã–ª–æ–∫:\s*(?:<b>)?(\d+)(?:</b>)?",
            "bb_coins": r"(?:ü™ô|üí∞)\s*BB-coins:\s*(?:<b>)?(\d+)(?:</b>)?",
            "gpoints": r"(?:üç™|üßπ)\s*GPoints:\s*(?:<b>)?(\d+)(?:</b>)?",
            "profit": r"üíµ\s*–û–±—â–∞—è\s*–ø—Ä–∏–±—ã–ª—å\s*(?:<b>)?([\d,]+)(?:</b>)?\s*–∫—Ä\./—á–∞—Å",
            "username": r"üôé‚Äç‚ôÇÔ∏è\s*(.+?)(?=\n|$)",
            "bunker_id": r"üè¢\s*–ë—É–Ω–∫–µ—Ä\s*‚Ññ(\d+)"
        }
        self.data_file = os.path.join(pathlib.Path.home(), ".hikka", "shadow_ultimat_data.json")
        os.makedirs(os.path.dirname(self.data_file), exist_ok=True)
        self._init_data()

    def _init_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON-—Ñ–∞–π–ª–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        default_data = {
            "greenhouse_active": True,
            "greenhouse_manual_stop": False,
            "greenhouse_paused": False,
            "experience": 0,
            "water": 0,
            "current_resource": "–∫–∞—Ä—Ç–æ—à–∫–∞",
            "warehouse": {
                "potato": 0,
                "carrot": 0,
                "rice": 0,
                "beet": 0,
                "cucumber": 0,
                "bean": 0,
                "tomato": 0
            }
        }
        if not os.path.exists(self.data_file):
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(default_data, f, indent=4)

    def _load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON"""
        try:
            with open(self.data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self._init_data()
            return self._load_data()

    def _save_data(self, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4)

    def _get_data(self, key, default):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ JSON"""
        data = self._load_data()
        return data.get(key, default)

    def _set_data(self, key, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON"""
        data = self._load_data()
        data[key] = value
        self._save_data(data)

    async def _safe_conversation(self, client, cmd, timeout=5):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–ª—É–¥-–≤–µ–π—Ç–∞"""
        async with self._lock:
            try:
                async with client.conversation(self.bot) as conv:
                    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {cmd}")
                    await conv.send_message(cmd)
                    response = await asyncio.wait_for(conv.get_response(), timeout=timeout)
                    logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ '{cmd}': {response.raw_text}")
                    return response
            except asyncio.TimeoutError:
                logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {cmd}")
                return None
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {cmd}: {e}")
                return None

    async def _greenhouse(self, client):
        """–ê–≤—Ç–æ—Ñ–∞—Ä–º —Ç–µ–ø–ª–∏—Ü—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1.5 —Å–µ–∫ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ '–≤—ã—Ä–∞—Å—Ç–∏—Ç—å'"""
        while self._get_data("greenhouse_active", True):
            if self._get_data("greenhouse_paused", False):
                logger.debug("–ê–≤—Ç–æ—Ñ–∞—Ä–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                await self._pause_event.wait()

            response = await self._safe_conversation(client, "–ú–æ—è —Ç–µ–ø–ª–∏—Ü–∞")
            if not response:
                logger.warning("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ '–ú–æ—è —Ç–µ–ø–ª–∏—Ü–∞', –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫")
                await asyncio.sleep(5)
                continue

            text = response.raw_text
            green_exp = re.search(r"‚≠êÔ∏è\s*–û–ø—ã—Ç:\s*(?:<b>)?([\d,]+)(?:</b>)?", text)
            water = re.search(r"üíß\s*–í–æ–¥–∞:\s*(?:<b>)?(\d+)/\d+\s*–ª\.(?:</b>)?", text)
            resource_match = re.search(r"ü™¥\s*–¢–µ–±–µ\s*–¥–æ—Å—Ç—É–ø–Ω–∞:\s*.+?\s*(.+?)(?=\n|$)", text)
            warehouse_match = re.search(r"üì¶\s*–¢–≤–æ–π\s*—Å–∫–ª–∞–¥:([\s\S]*?)(?=\n\n|\Z)", text)

            if not (green_exp and water and resource_match):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–ª–∏—Ü—ã: {text}")
                await asyncio.sleep(5)
                continue

            green_exp = int(green_exp.group(1).replace(",", ""))
            water = int(water.group(1))
            resource = resource_match.group(1).strip()
            resource_key = {
                "ü•î –ö–∞—Ä—Ç–æ—à–∫–∞": "potato",
                "ü•ï –ú–æ—Ä–∫–æ–≤—å": "carrot",
                "üçö –†–∏—Å": "rice",
                "üç† –°–≤–µ–∫–ª–∞": "beet",
                "ü•í –û–≥—É—Ä–µ—Ü": "cucumber",
                "ü´ò –§–∞—Å–æ–ª—å": "bean",
                "üçÖ –ü–æ–º–∏–¥–æ—Ä": "tomato"
            }.get(resource, "potato")

            for exp_range, res in self._resources_map.items():
                if green_exp in exp_range:
                    resource = res
                    resource_key = {
                        "–∫–∞—Ä—Ç–æ—à–∫–∞": "potato",
                        "–º–æ—Ä–∫–æ–≤—å": "carrot",
                        "—Ä–∏—Å": "rice",
                        "—Å–≤–µ–∫–ª–∞": "beet",
                        "–æ–≥—É—Ä–µ—Ü": "cucumber",
                        "—Ñ–∞—Å–æ–ª—å": "bean",
                        "–ø–æ–º–∏–¥–æ—Ä": "tomato"
                    }.get(resource, "potato")
                    break

            warehouse = self._get_data("warehouse", {
                "potato": 0,
                "carrot": 0,
                "rice": 0,
                "beet": 0,
                "cucumber": 0,
                "bean": 0,
                "tomato": 0
            })

            if warehouse_match:
                warehouse_lines = warehouse_match.group(1).strip().split("\n")
                for line in warehouse_lines:
                    match = re.match(r"\s*(.+?)\s*-\s*(\d+)\s*—à—Ç\.", line)
                    if match:
                        item = match.group(1).strip()
                        amount = int(match.group(2))
                        item_key = {
                            "ü•î –ö–∞—Ä—Ç–æ—à–∫–∞": "potato",
                            "ü•ï –ú–æ—Ä–∫–æ–≤—å": "carrot",
                            "üçö –†–∏—Å": "rice",
                            "üç† –°–≤–µ–∫–ª–∞": "beet",
                            "ü•í –û–≥—É—Ä–µ—Ü": "cucumber",
                            "ü´ò –§–∞—Å–æ–ª—å": "bean",
                            "üçÖ –ü–æ–º–∏–¥–æ—Ä": "tomato"
                        }.get(item, None)
                        if item_key is not None:
                            warehouse[item_key] = amount
                        else:
                            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ: {item}")

            self._set_data("experience", green_exp)
            self._set_data("water", water)
            self._set_data("current_resource", resource)
            self._set_data("warehouse", warehouse)

            if water == 0:
                logger.info("–í–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –æ–∂–∏–¥–∞–Ω–∏–µ 10 –º–∏–Ω—É—Ç")
                self._set_data("greenhouse_active", False)
                await asyncio.sleep(600)
                if self._get_data("greenhouse_manual_stop", False):
                    logger.info("–ê–≤—Ç–æ—Ñ–∞—Ä–º –æ—Å—Ç–∞—ë—Ç—Å—è –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –∏–∑-–∑–∞ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                    break
                water += 1
                self._set_data("water", water)
                self._set_data("greenhouse_active", True)
                logger.info(f"–í–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {water}, –∞–≤—Ç–æ—Ñ–∞—Ä–º –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω")
                continue

            while water > 0 and self._get_data("greenhouse_active", True):
                command_resource = self._command_map.get(resource, "–∫–∞—Ä—Ç–æ—à–∫–∞")
                command = f"–≤—ã—Ä–∞—Å—Ç–∏—Ç—å {command_resource}"
                response = await self._safe_conversation(client, command)
                if not response:
                    logger.warning(f"–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ '{command}', –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫")
                    await asyncio.sleep(1.5)
                    continue

                if "—É—Å–ø–µ—à–Ω–æ –≤—ã—Ä–∞—Å—Ç–∏–ª(-–∞)" in response.raw_text:
                    water -= 1
                    warehouse[resource_key] += 1
                    self._set_data("warehouse", warehouse)
                    self._set_data("water", water)
                    logger.info(f"–í—ã—Ä–∞—â–µ–Ω–∞ {resource}, –≤–æ–¥–∞: {water}, —Å–∫–ª–∞–¥: {warehouse[resource_key]}")
                elif "—É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç" in response.raw_text:
                    logger.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã, –æ–∂–∏–¥–∞–Ω–∏–µ 10 –º–∏–Ω—É—Ç")
                    self._set_data("greenhouse_active", False)
                    await asyncio.sleep(600)
                    if self._get_data("greenhouse_manual_stop", False):
                        logger.info("–ê–≤—Ç–æ—Ñ–∞—Ä–º –æ—Å—Ç–∞—ë—Ç—Å—è –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –∏–∑-–∑–∞ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                        break
                    water += 1
                    self._set_data("water", water)
                    self._set_data("greenhouse_active", True)
                    logger.info(f"–í–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {water}, –∞–≤—Ç–æ—Ñ–∞—Ä–º –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω")
                    break
                elif "VIP" in response.raw_text:
                    logger.error(f"–¢—Ä–µ–±—É–µ—Ç—Å—è VIP-—Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è: {response.raw_text}")
                    self._set_data("greenhouse_active", False)
                    break
                else:
                    logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ '{command}': {response.raw_text}")
                    await asyncio.sleep(1.5)
                    continue

                await asyncio.sleep(1.5)

            await asyncio.sleep(5)

        return False

    def extract_profile_data(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
        data = {
            "balance": "0/0 –∫—Ä.",
            "bottles": "0",
            "bb_coins": "0",
            "gpoints": "0",
            "profit": "0 –∫—Ä./—á–∞—Å",
            "username": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "bunker_id": "0"
        }
        for key, pattern in self.regexes.items():
            match = re.search(pattern, text, re.MULTILINE)
            if match:
                data[key] = match.group(1)
                logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {key}: {data[key]}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å {key} –∏–∑ —Ç–µ–∫—Å—Ç–∞: {text}")
        return data

    def get_vip_status(self, text, is_premium):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ VIP-—Å—Ç–∞—Ç—É—Å–∞"""
        if "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏èVIP4‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è" in text:
            return self.strings["vip4_premium" if is_premium else "vip4"]
        elif "üíéüíéüíéVIP3üíéüíéüíé" in text:
            return self.strings["vip3_premium" if is_premium else "vip3"]
        elif re.search(r"üî•üî•üî•?VIP2üî•üî•üî•?", text):
            return self.strings["vip2_premium" if is_premium else "vip2"]
        elif "‚ö°Ô∏èVIP1‚ö°Ô∏è" in text:
            return self.strings["vip1_premium" if is_premium else "vip1"]
        return ""

    def get_admin_status(self, text, is_premium):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞"""
        if "üíª –¢–µ—Ö. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üíª" in text:
            return self.strings["admin_tech_premium" if is_premium else "admin_tech"]
        elif "üòà –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ñ.—á–∞—Ç–∞ üòà" in text:
            return self.strings["admin_chat_premium" if is_premium else "admin_chat"]
        return ""
