import json
import os
import pathlib
import re
import asyncio
from hikkatl.types import Message

class ShadowUltimatCore:
    def __init__(self, bot, config, strings, lock):
        self.bot = bot
        self.config = config
        self.strings = strings
        self._lock = lock
        self._pause_event = asyncio.Event()
        self._pause_event.set()
        self._resources_map = {
            range(0, 500): "–∫–∞—Ä—Ç–æ—à–∫–∞",
            range(501, 2000): "–º–æ—Ä–∫–æ–≤—å",
            range(2001, 10000): "—Ä–∏—Å",
            range(10001, 25000): "—Å–≤–µ–∫–ª–∞",
            range(25001, 60000): "–æ–≥—É—Ä–µ—Ü",
            range(60001, 100000): "—Ñ–∞—Å–æ–ª—å",
            range(100001, 10**50): "–ø–æ–º–∏–¥–æ—Ä",
        }
        self._command_map = {
            "–∫–∞—Ä—Ç–æ—à–∫–∞": "–∫–∞—Ä—Ç–æ—à–∫–∞",
            "–º–æ—Ä–∫–æ–≤—å": "–º–æ—Ä–∫–æ–≤—å",
            "—Ä–∏—Å": "—Ä–∏—Å",
            "—Å–≤–µ–∫–ª–∞": "—Å–≤–µ–∫–ª–∞",
            "–æ–≥—É—Ä–µ—Ü": "–æ–≥—É—Ä–µ—Ü",
            "—Ñ–∞—Å–æ–ª—å": "—Ñ–∞—Å–æ–ª—å",
            "–ø–æ–º–∏–¥–æ—Ä": "–ø–æ–º–∏–¥–æ—Ä",
        }
        self._mine_resources_map = {
            "–£–≥–æ–ª—å": "coal",
            "–ñ–µ–ª–µ–∑–æ": "iron",
            "–£—Ä–∞–Ω": "uranium",
            "–ê–ª–º–∞–∑": "diamond"
        }
        self.regexes = {
            "balance": r"üí∞\s*–ë–∞–ª–∞–Ω—Å:\s*(?:<b>)?([\d,]+(?:/[,\dkk]+)?)(?:</b>)?\s*–∫—Ä\.",
            "bottles": r"(?:üçæ|ü•Ç)\s*–ë—É—Ç—ã–ª–æ–∫:\s*(?:<b>)?(\d+)(?:</b>)?",
            "bb_coins": r"(?:ü™ô|üí∞)\s*BB-coins:\s*(?:<b>)?(\d+)(?:</b>)?",
            "gpoints": r"(?:üç™|üßπ)\s*GPoints:\s*(?:<b>)?(\d+)(?:</b>)?",
            "profit": r"üíµ\s*–û–±—â–∞—è\s*–ø—Ä–∏–±—ã–ª—å\s*(?:<b>)?([\d,]+)(?:</b>)?\s*–∫—Ä\./—á–∞—Å",
            "username": r"üôé‚Äç‚ôÇÔ∏è\s*(.+?)(?=\n|$)",
            "bunker_id": r"üè¢\s*–ë—É–Ω–∫–µ—Ä\s*‚Ññ(\d+)"
        }
        self.data_file = os.path.join(pathlib.Path.home(), ".heroku", "shadow_ultimat_data.json")
        os.makedirs(os.path.dirname(self.data_file), exist_ok=True)
        self._init_data()

    def _init_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON-—Ñ–∞–π–ª–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        default_data = {
            "greenhouse_active": True,
            "greenhouse_manual_stop": False,
            "greenhouse_paused": False,
            "mine_active": True,
            "mine_manual_stop": False,
            "experience": 0,
            "water": 0,
            "current_resource": "–∫–∞—Ä—Ç–æ—à–∫–∞",
            "warehouse": {
                "potato": 0,
                "carrot": 0,
                "rice": 0,
                "beet": 0,
                "cucumber": 0,
                "bean": 0,
                "tomato": 0
            },
            "mine_warehouse": {
                "coal": 0,
                "iron": 0,
                "uranium": 0,
                "diamond": 0
            },
            "message_ids": {}
        }
        if not os.path.exists(self.data_file):
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(default_data, f, indent=4)

    def _load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON"""
        try:
            with open(self.data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self._init_data()
            return self._load_data()

    def _save_data(self, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4)

    def _get_data(self, key, default):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ JSON"""
        data = self._load_data()
        return data.get(key, default)

    def _set_data(self, key, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON"""
        data = self._load_data()
        data[key] = value
        self._save_data(data)

    async def _safe_conversation(self, client, cmd, timeout=5):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–ª—É–¥-–ª–∏–º–∏—Ç–æ–≤"""
        async with self._lock:
            try:
                async with client.conversation(self.bot) as conv:
                    await conv.send_message(cmd)
                    response = await asyncio.wait_for(conv.get_response(), timeout=timeout)
                    return response
            except (asyncio.TimeoutError, Exception):
                return None

    async def _greenhouse(self, client):
        """–ê–≤—Ç–æ—Ñ–∞—Ä–º —Ç–µ–ø–ª–∏—Ü—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã"""
        is_premium = (await client.get_me()).premium
        log_prefix = "<emoji document_id=5449885771420934013>üå±</emoji> " if is_premium else "üå± "

        while self._get_data("greenhouse_active", True):
            if self._get_data("greenhouse_paused", False):
                await self._pause_event.wait()

            response = await self._safe_conversation(client, "–ú–æ—è —Ç–µ–ø–ª–∏—Ü–∞")
            if not response:
                await client.send_message(self._log_channel, f"{log_prefix}üîª –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–µ–ø–ª–∏—Ü—ã")
                await asyncio.sleep(5)
                continue

            text = response.raw_text
            green_exp = re.search(r"‚≠êÔ∏è\s*–û–ø—ã—Ç:\s*(?:<b>)?([\d,]+)(?:</b>)?", text)
            water = re.search(r"üíß\s*–í–æ–¥–∞:\s*(?:<b>)?(\d+)/\d+\s*–ª\.(?:</b>)?", text)
            resource_match = re.search(r"ü™¥\s*–¢–µ–±–µ\s*–¥–æ—Å—Ç—É–ø–Ω–∞:\s*.+?\s*(.+?)(?=\n|$)", text)
            warehouse_match = re.search(r"üì¶\s*–¢–≤–æ–π\s*—Å–∫–ª–∞–¥:([\s\S]*?)(?=\n\n|\Z)", text)

            if not (green_exp and water and resource_match):
                await client.send_message(self._log_channel, f"{log_prefix}üîª –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ–ø–ª–∏—Ü—ã")
                await asyncio.sleep(5)
                continue

            green_exp = int(green_exp.group(1).replace(",", ""))
            water = int(water.group(1))
            resource = resource_match.group(1).strip()
            resource_key = {
                "ü•î –ö–∞—Ä—Ç–æ—à–∫–∞": "potato",
                "ü•ï –ú–æ—Ä–∫–æ–≤—å": "carrot",
                "üçö –†–∏—Å": "rice",
                "üç† –°–≤–µ–∫–ª–∞": "beet",
                "ü•í –û–≥—É—Ä–µ—Ü": "cucumber",
                "ü´ò –§–∞—Å–æ–ª—å": "bean",
                "üçÖ –ü–æ–º–∏–¥–æ—Ä": "tomato"
            }.get(resource, "potato")

            for exp_range, res in self._resources_map.items():
                if green_exp in exp_range:
                    resource = res
                    resource_key = {
                        "–∫–∞—Ä—Ç–æ—à–∫–∞": "potato",
                        "–º–æ—Ä–∫–æ–≤—å": "carrot",
                        "—Ä–∏—Å": "rice",
                        "—Å–≤–µ–∫–ª–∞": "beet",
                        "–æ–≥—É—Ä–µ—Ü": "cucumber",
                        "—Ñ–∞—Å–æ–ª—å": "bean",
                        "–ø–æ–º–∏–¥–æ—Ä": "tomato"
                    }.get(resource, "potato")
                    break

            warehouse = self._get_data("warehouse", {
                "potato": 0,
                "carrot": 0,
                "rice": 0,
                "beet": 0,
                "cucumber": 0,
                "bean": 0,
                "tomato": 0
            })

            if warehouse_match:
                warehouse_lines = warehouse_match.group(1).strip().split("\n")
                for line in warehouse_lines:
                    match = re.match(r"\s*(.+?)\s*-\s*(\d+)\s*—à—Ç\.", line)
                    if match:
                        item = match.group(1).strip()
                        amount = int(match.group(2))
                        item_key = {
                            "ü•î –ö–∞—Ä—Ç–æ—à–∫–∞": "potato",
                            "ü•ï –ú–æ—Ä–∫–æ–≤—å": "carrot",
                            "üçö –†–∏—Å": "rice",
                            "üç† –°–≤–µ–∫–ª–∞": "beet",
                            "ü•í –û–≥—É—Ä–µ—Ü": "cucumber",
                            "ü´ò –§–∞—Å–æ–ª—å": "bean",
                            "üçÖ –ü–æ–º–∏–¥–æ—Ä": "tomato"
                        }.get(item, None)
                        if item_key is not None:
                            warehouse[item_key] = amount

            self._set_data("experience", green_exp)
            self._set_data("water", water)
            self._set_data("current_resource", resource)
            self._set_data("warehouse", warehouse)

            if water == 0:
                self._set_data("greenhouse_active", False)
                await client.send_message(self._log_channel, f"{log_prefix}üîª –í–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –∂–¥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                await asyncio.sleep(600)  # –ñ–¥—ë–º 10 –º–∏–Ω—É—Ç
                if self._get_data("greenhouse_manual_stop", False):
                    await client.send_message(self._log_channel, f"{log_prefix}üîª –ê–≤—Ç–æ—Ñ–∞—Ä–º —Ç–µ–ø–ª–∏—Ü—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
                    break
                water = 1
                self._set_data("water", water)
                self._set_data("greenhouse_active", True)
                await client.send_message(self._log_channel, f"{log_prefix}üîπ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ 1 –∫–∞–ø–ª—è –≤–æ–¥—ã")
                continue

            while water > 0 and self._get_data("greenhouse_active", True):
                command_resource = self._command_map.get(resource, "–∫–∞—Ä—Ç–æ—à–∫–∞")
                command = f"–≤—ã—Ä–∞—Å—Ç–∏—Ç—å {command_resource}"
                response = await self._safe_conversation(client, command)
                if not response:
                    await client.send_message(self._log_channel, f"{log_prefix}üîª –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏ {resource}")
                    await asyncio.sleep(1.5)
                    continue

                if "—É—Å–ø–µ—à–Ω–æ –≤—ã—Ä–∞—Å—Ç–∏–ª(-–∞)" in response.raw_text:
                    water -= 1
                    warehouse[resource_key] += 1
                    self._set_data("warehouse", warehouse)
                    self._set_data("water", water)
                    await client.send_message(self._log_channel, f"{log_prefix}üîπ –£—Å–ø–µ—à–Ω–æ –≤—ã—Ä–∞—â–µ–Ω–æ {resource}!")
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
                    asyncio.create_task(self._report_water_restore(client))
                elif "—É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç" in response.raw_text:
                    self._set_data("greenhouse_active", False)
                    await client.send_message(self._log_channel, f"{log_prefix}üîª –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤, –∂–¥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                    await asyncio.sleep(600)
                    if self._get_data("greenhouse_manual_stop", False):
                        await client.send_message(self._log_channel, f"{log_prefix}üîª –ê–≤—Ç–æ—Ñ–∞—Ä–º —Ç–µ–ø–ª–∏—Ü—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
                        break
                    water = 1
                    self._set_data("water", water)
                    self._set_data("greenhouse_active", True)
                    await client.send_message(self._log_channel, f"{log_prefix}üîπ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ 1 –∫–∞–ø–ª—è –≤–æ–¥—ã")
                    break
                elif "VIP" in response.raw_text:
                    self._set_data("greenhouse_active", False)
                    await client.send_message(self._log_channel, f"{log_prefix}üîª –¢—Ä–µ–±—É–µ—Ç—Å—è VIP-—Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç–µ–ø–ª–∏—Ü—ã")
                    break
                else:
                    await client.send_message(self._log_channel, f"{log_prefix}üîª –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏: {response.raw_text}")
                    await asyncio.sleep(1.5)
                    continue

                await asyncio.sleep(1.5)

            await asyncio.sleep(self.config["greenhouse_interval"])

        return False

    async def _report_water_restore(self, client):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—ã —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"""
        is_premium = (await client.get_me()).premium
        log_prefix = "<emoji document_id=5449885771420934013>üå±</emoji> " if is_premium else "üå± "
        await asyncio.sleep(600)  # –ñ–¥—ë–º 10 –º–∏–Ω—É—Ç
        if self._get_data("greenhouse_active", True):
            await client.send_message(self._log_channel, f"{log_prefix}üîπ –ó–∞ 10 –º–∏–Ω—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 1 –∫–∞–ø–ª—è –≤–æ–¥—ã")

    async def _mine(self, client):
        """–ê–≤—Ç–æ—Ñ–∞—Ä–º —à–∞—Ö—Ç—ã"""
        is_premium = (await client.get_me()).premium
        log_prefix = "<emoji document_id=5413478709875450870>‚õè</emoji> " if is_premium else "‚õè "

        while self._get_data("mine_active", True):
            async with self._lock:
                response = await self._safe_conversation(client, "–∫–æ–ø–∞—Ç—å")
                if not response:
                    await client.send_message(self._log_channel, f"{log_prefix}üîª –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '–∫–æ–ø–∞—Ç—å'")
                    await asyncio.sleep(5)
                    continue

                if "—É —Ç–µ–±—è –Ω–µ—Ç –∫–∏—Ä–∫–∏" in response.raw_text:
                    await asyncio.sleep(1.5)
                    response = await self._safe_conversation(client, "–ë")
                    if not response:
                        await client.send_message(self._log_channel, f"{log_prefix}üîª –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞")
                        await asyncio.sleep(5)
                        continue

                    balance = int("".join(s for s in response.raw_text.split("–ë–∞–ª–∞–Ω—Å:")[1].split('/')[0].strip() if s.isdigit()))
                    if balance < 30000:
                        await client.send_message(self._log_channel, f"{log_prefix}üîª –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä—ã—à–µ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∏—Ä–∫–∏")
                        await asyncio.sleep(self.config["mine_interval"])
                        continue

                    await asyncio.sleep(1.5)
                    if balance >= 1000000:
                        await self._safe_conversation(client, "–ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑–Ω—É—é –∫–∏—Ä–∫—É")
                    elif balance >= 200000:
                        await self._safe_conversation(client, "–ö—É–ø–∏—Ç—å –∂–µ–ª–µ–∑–Ω—É—é –∫–∏—Ä–∫—É")
                    else:
                        await self._safe_conversation(client, "–ö—É–ø–∏—Ç—å –∫–∞–º–µ–Ω–Ω—É—é –∫–∏—Ä–∫—É")
                        await asyncio.sleep(self.config["mine_interval"])
                        continue

                    response = await self._safe_conversation(client, "–∫–æ–ø–∞—Ç—å")
                    if not response:
                        await client.send_message(self._log_channel, f"{log_prefix}üîª –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ '–∫–æ–ø–∞—Ç—å'")
                        await asyncio.sleep(5)
                        continue

                if '–æ—Ç–¥–æ—Ö–Ω—ë—Ç' in response.raw_text:
                    await client.send_message(self._log_channel, f"{log_prefix}üîª –ö–∏—Ä–∫–∞ –æ—Ç–¥—ã—Ö–∞–µ—Ç")
                    await asyncio.sleep(self.config["mine_interval"])
                    continue

                resources_result = response.raw_text.split("—Ç—ã –Ω–∞—à—ë–ª")
                if len(resources_result) > 1:
                    resources_text = resources_result[1].split(' ')[1:]
                    resources = ' '.join(resources_text).split('.')[0]
                else:
                    resources = '–í–æ–∑–¥—É—Ö'

                probability_result = response.raw_text.split("–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é")
                if len(probability_result) > 1:
                    probability_text = probability_result[1]
                    probability = int("".join(s for s in probability_text.split('%')[0].strip() if s.isdigit()))
                else:
                    probability = 0

                mine_warehouse = self._get_data("mine_warehouse", {
                    "coal": 0, "iron": 0, "uranium": 0, "diamond": 0
                })

                if self.config.get("MineDiamond", False):
                    if "—Ç—ã –Ω–∞—à—ë–ª üíé –ê–ª–º–∞–∑." in response.message or probability == 100:
                        await asyncio.sleep(1.5)
                        await response.click(0)
                        response = await self._safe_conversation(client, response.message_id, timeout=5)
                        if response and "–ü—Ä–æ—á–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–π –∫–∏—Ä–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∞" in response.text:
                            await client.send_message(self._log_channel, f"{log_prefix}üîª –ü—Ä–æ—á–Ω–æ—Å—Ç—å –∫–∏—Ä–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∞")
                        else:
                            resource_key = self._mine_resources_map.get(resources, None)
                            if resource_key:
                                mine_warehouse[resource_key] += 1
                                self._set_data("mine_warehouse", mine_warehouse)
                            await client.send_message(self._log_channel, f"{log_prefix}üîπ –¢—ã –¥–æ–±—ã–ª {resources} —Å —à–∞–Ω—Å–æ–º {probability}%")
                    else:
                        if self.config.get("SkipNonUranium", True) and "–£—Ä–∞–Ω" not in resources:
                            await asyncio.sleep(1.5)
                            await response.click(1)
                            await client.send_message(self._log_channel, f"{log_prefix}üî∏ –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª {resources} —Å —à–∞–Ω—Å–æ–º {probability}%")
                        else:
                            await asyncio.sleep(1.5)
                            await response.click(0)
                            resource_key = self._mine_resources_map.get(resources, None)
                            if resource_key:
                                mine_warehouse[resource_key] += 1
                                self._set_data("mine_warehouse", mine_warehouse)
                            await client.send_message(self._log_channel, f"{log_prefix}üîπ –¢—ã –¥–æ–±—ã–ª {resources} —Å —à–∞–Ω—Å–æ–º {probability}%")
                else:
                    await asyncio.sleep(1.5)
                    await response.click(0)
                    response = await self._safe_conversation(client, response.message_id, timeout=5)
                    if response and "–ü—Ä–æ—á–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–π –∫–∏—Ä–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∞" in response.text:
                        await client.send_message(self._log_channel, f"{log_prefix}üîª –ü—Ä–æ—á–Ω–æ—Å—Ç—å –∫–∏—Ä–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∞")
                    else:
                        resource_key = self._mine_resources_map.get(resources, None)
                        if resource_key:
                            mine_warehouse[resource_key] += 1
                            self._set_data("mine_warehouse", mine_warehouse)
                        if self.config.get("SkipNonUranium", True) and "–£—Ä–∞–Ω" not in resources:
                            await client.send_message(self._log_channel, f"{log_prefix}üî∏ –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª {resources} —Å —à–∞–Ω—Å–æ–º {probability}%")
                        else:
                            await client.send_message(self._log_channel, f"{log_prefix}üîπ –¢—ã –¥–æ–±—ã–ª {resources} —Å —à–∞–Ω—Å–æ–º {probability}%")
                    await asyncio.sleep(self.config["mine_interval"])
                    continue

                if self.config.get("MineProbability", False):
                    if 80 <= probability <= 100:
                        await asyncio.sleep(1.5)
                        await response.click(0)
                        response = await self._safe_conversation(client, response.message_id, timeout=5)
                        if response and "–ü—Ä–æ—á–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–π –∫–∏—Ä–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∞" in response.text:
                            await client.send_message(self._log_channel, f"{log_prefix}üîª –ü—Ä–æ—á–Ω–æ—Å—Ç—å –∫–∏—Ä–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∞")
                        else:
                            resource_key = self._mine_resources_map.get(resources, None)
                            if resource_key:
                                mine_warehouse[resource_key] += 1
                                self._set_data("mine_warehouse", mine_warehouse)
                            await client.send_message(self._log_channel, f"{log_prefix}üîπ –¢—ã –¥–æ–±—ã–ª {resources} —Å —à–∞–Ω—Å–æ–º {probability}%")
                    else:
                        await asyncio.sleep(1.5)
                        await response.click(1)
                        await client.send_message(self._log_channel, f"{log_prefix}üî∏ –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª {resources} —Å —à–∞–Ω—Å–æ–º {probability}%")
                else:
                    await asyncio.sleep(1.5)
                    await response.click(0)
                    response = await self._safe_conversation(client, response.message_id, timeout=5)
                    if response and "–ü—Ä–æ—á–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–π –∫–∏—Ä–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∞" in response.text:
                        await client.send_message(self._log_channel, f"{log_prefix}üîª –ü—Ä–æ—á–Ω–æ—Å—Ç—å –∫–∏—Ä–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∞")
                    else:
                        resource_key = self._mine_resources_map.get(resources, None)
                        if resource_key:
                            mine_warehouse[resource_key] += 1
                            self._set_data("mine_warehouse", mine_warehouse)
                        await client.send_message(self._log_channel, f"{log_prefix}üîπ –¢—ã –¥–æ–±—ã–ª {resources} —Å —à–∞–Ω—Å–æ–º {probability}%")

                await asyncio.sleep(self.config["mine_interval"])

        return False

    def extract_profile_data(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
        def convert_balance(match):
            balance = match.group(1)
            parts = balance.split('/')
            result = []

            for part in parts:
                k_match = re.search(r'(\d+[,\d]*)(k+)', part, re.IGNORECASE)
                if k_match:
                    num_str = k_match.group(1).replace(',', '.')
                    k_count = len(k_match.group(2))
                    try:
                        num = float(num_str) * (10 ** (3 * k_count))
                        formatted_num = f"{int(num):,}".replace(',', ' ')
                    except ValueError:
                        formatted_num = part
                else:
                    formatted_num = part.replace(',', ' ')
                result.append(formatted_num)

            return '/'.join(result)

        data = {
            "balance": "0/0 –∫—Ä.",
            "bottles": "0",
            "bb_coins": "0",
            "gpoints": "0",
            "profit": "0 –∫—Ä./—á–∞—Å",
            "username": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "bunker_id": "0"
        }
        for key, pattern in self.regexes.items():
            match = re.search(pattern, text, re.MULTILINE)
            if match:
                if key == "balance":
                    data[key] = convert_balance(match)
                else:
                    data[key] = match.group(1)
        return data

    def get_vip_status(self, text, is_premium):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ VIP-—Å—Ç–∞—Ç—É—Å–∞"""
        if "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏èVIP4‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è" in text:
            return self.strings["vip4_premium" if is_premium else "vip4"]
        elif "üíéüíéüíéVIP3üíéüíéüíé" in text:
            return self.strings["vip3_premium" if is_premium else "vip3"]
        elif re.search(r"üî•üî•üî•?VIP2üî•üî•üî•?", text):
            return self.strings["vip2_premium" if is_premium else "vip2"]
        elif "‚ö°Ô∏èVIP1‚ö°Ô∏è" in text:
            return self.strings["vip1_premium" if is_premium else "vip1"]
        return ""

    def get_admin_status(self, text, is_premium):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞"""
        admin_status = ""
        if "üíª –¢–µ—Ö. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üíª" in text:
            admin_status += self.strings["admin_tech_premium" if is_premium else "admin_tech"]
        if "üòà –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ñ.—á–∞—Ç–∞ üòà" in text:
            admin_status += self.strings["admin_chat_premium" if is_premium else "admin_chat"]
        return admin_status
