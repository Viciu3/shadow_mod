import json
import os
import pathlib
import re
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class ShadowUltimatCore:
    def __init__(self, bot, config, strings):
        self.bot = bot
        self.config = config
        self.strings = strings  # –ü–æ–ª—É—á–∞–µ–º strings –∏–∑ ShadowUltimat
        self._pause_event = asyncio.Event()  # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–∞—É–∑—ã –∞–≤—Ç–æ—Ñ–∞—Ä–º–∞
        self._pause_event.set()  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∞–≤—Ç–æ—Ñ–∞—Ä–º –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        self._resources_map = {
            range(0, 501): "–∫–∞—Ä—Ç–æ—à–∫–∞",
            range(501, 2001): "–º–æ—Ä–∫–æ–≤—å",
            range(2001, 10001): "—Ä–∏—Å",
            range(10001, 25001): "—Å–≤–µ–∫–ª–∞",
            range(25001, 60001): "–æ–≥—É—Ä–µ—Ü",
            range(60001, 100001): "—Ñ–∞—Å–æ–ª—å",
            range(100001, 10**50): "–ø–æ–º–∏–¥–æ—Ä",
        }
        self.regexes = {
            "balance": r"üí∞ –ë–∞–ª–∞–Ω—Å: ([\d,]+/[\d,]+(?:kk)?\s*–∫—Ä\.)",
            "bottles": r"üçæ –ë—É—Ç—ã–ª–æ–∫: (\d+)|ü•Ç –ë—É—Ç—ã–ª–æ–∫: (\d+)",
            "bb_coins": r"ü™ô BB-coins: (\d+)|üí∞ BB-coins: (\d+)",
            "gpoints": r"üç™ GPoints: (\d+)|üßπ GPoints: (\d+)",
            "profit": r"üíµ (.+?)(?=\nüìÖ|\nüßç|\Z)",
            "username": r"üôé‚Äç‚ôÇÔ∏è (.+?)(?=\n|$)",
            "bunker_id": r"üè¢ –ë—É–Ω–∫–µ—Ä ‚Ññ(\d+)"
        }
        self.data_file = os.path.join(pathlib.Path.home(), ".hikka", "shadow_ultimat_data.json")
        os.makedirs(os.path.dirname(self.data_file), exist_ok=True)
        self._init_data()

    def _init_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON-—Ñ–∞–π–ª–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        default_data = {
            "greenhouse_active": True,
            "greenhouse_manual_stop": False,  # –§–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            "greenhouse_paused": False,  # –§–ª–∞–≥ –ø–∞—É–∑—ã –¥–ª—è –∫–æ–º–∞–Ω–¥
            "experience": 0,
            "water": 0,
            "current_resource": "–∫–∞—Ä—Ç–æ—à–∫–∞",
            "warehouse": {
                "potato": 0,
                "carrot": 0,
                "rice": 0,
                "beet": 0,
                "cucumber": 0,
                "bean": 0,
                "tomato": 0
            }
        }
        if not os.path.exists(self.data_file):
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(default_data, f, indent=4)

    def _load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON"""
        try:
            with open(self.data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self._init_data()
            return self._load_data()

    def _save_data(self, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4)

    def _get_data(self, key, default):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ JSON"""
        data = self._load_data()
        return data.get(key, default)

    def _set_data(self, key, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON"""
        data = self._load_data()
        data[key] = value
        self._save_data(data)

    async def _greenhouse(self, client):
        """–ê–≤—Ç–æ—Ñ–∞—Ä–º —Ç–µ–ø–ª–∏—Ü—ã —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –≤–æ–¥—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º"""
        while self._get_data("greenhouse_active", True):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –∞–≤—Ç–æ—Ñ–∞—Ä–º
            if self._get_data("greenhouse_paused", False):
                logger.debug("–ê–≤—Ç–æ—Ñ–∞—Ä–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                await self._pause_event.wait()

            async with client.conversation(self.bot) as conv:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–ø–ª–∏—Ü—ã
                await conv.send_message("–ú–æ—è —Ç–µ–ø–ª–∏—Ü–∞")
                try:
                    response = await asyncio.wait_for(conv.get_response(), timeout=5)
                except asyncio.TimeoutError:
                    logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–ª–∏—Ü—ã")
                    continue
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Ç–µ–ø–ª–∏—Ü—ã: {e}")
                    continue

                text = response.raw_text
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: –æ–ø—ã—Ç, –≤–æ–¥–∞, –¥–æ—Å—Ç—É–ø–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞, —Å–∫–ª–∞–¥
                green_exp = re.search(r"–û–ø—ã—Ç: (\d+)", text)  # –û–ø—ã—Ç —Ç–µ–ø–ª–∏—Ü—ã
                water = re.search(r"–í–æ–¥–∞: (\d+)/\d+ –ª\.", text)  # –¢–µ–∫—É—â–∞—è –≤–æ–¥–∞
                resource_match = re.search(r"ü™¥ –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞: (.+?)(?=\n|$)", text)  # –î–æ—Å—Ç—É–ø–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞
                warehouse_match = re.search(r"üì¶ –¢–≤–æ–π —Å–∫–ª–∞–¥:([\s\S]*?)(?=\n\n|\Z)", text)  # –°–∫–ª–∞–¥

                if not (green_exp and water and resource_match):
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–ª–∏—Ü—ã: {text}")
                    continue

                green_exp = int(green_exp.group(1))
                water = int(water.group(1))
                resource = resource_match.group(1).strip()
                resource_key = {
                    "ü•î –ö–∞—Ä—Ç–æ—à–∫–∞": "potato",
                    "ü•ï –ú–æ—Ä–∫–æ–≤—å": "carrot",
                    "üçö –†–∏—Å": "rice",
                    "üç† –°–≤–µ–∫–ª–∞": "beet",
                    "ü•í –û–≥—É—Ä–µ—Ü": "cucumber",
                    "ü´ò –§–∞—Å–æ–ª—å": "bean",
                    "üçÖ –ü–æ–º–∏–¥–æ—Ä": "tomato"
                }.get(resource, "potato")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫—É–ª—å—Ç—É—Ä—ã –æ–ø—ã—Ç—É
                for exp_range, res in self._resources_map.items():
                    if green_exp in exp_range:
                        resource = res
                        resource_key = {
                            "–∫–∞—Ä—Ç–æ—à–∫–∞": "potato",
                            "–º–æ—Ä–∫–æ–≤—å": "carrot",
                            "—Ä–∏—Å": "rice",
                            "—Å–≤–µ–∫–ª–∞": "beet",
                            "–æ–≥—É—Ä–µ—Ü": "cucumber",
                            "—Ñ–∞—Å–æ–ª—å": "bean",
                            "–ø–æ–º–∏–¥–æ—Ä": "tomato"
                        }.get(resource, "potato")
                        break

                warehouse = self._get_data("warehouse", {
                    "potato": 0,
                    "carrot": 0,
                    "rice": 0,
                    "beet": 0,
                    "cucumber": 0,
                    "bean": 0,
                    "tomato": 0
                })

                # –ü–∞—Ä—Å–∏–Ω–≥ —Å–∫–ª–∞–¥–∞
                if warehouse_match:
                    warehouse_lines = warehouse_match.group(1).strip().split("\n")
                    for line in warehouse_lines:
                        match = re.match(r"\s*(.+?) - (\d+) —à—Ç\.", line)
                        if match:
                            item = match.group(1).strip()
                            amount = int(match.group(2))
                            item_key = {
                                "ü•î –ö–∞—Ä—Ç–æ—à–∫–∞": "potato",
                                "ü•ï –ú–æ—Ä–∫–æ–≤—å": "carrot",
                                "üçö –†–∏—Å": "rice",
                                "üç† –°–≤–µ–∫–ª–∞": "beet",
                                "ü•í –û–≥—É—Ä–µ—Ü": "cucumber",
                                "ü´ò –§–∞—Å–æ–ª—å": "bean",
                                "üçÖ –ü–æ–º–∏–¥–æ—Ä": "tomato"
                            }.get(item)
                            if item_key:
                                warehouse[item_key] = amount

                # –û–±–Ω–æ–≤–ª—è–µ–º JSON
                self._set_data("experience", green_exp)
                self._set_data("water", water)
                self._set_data("current_resource", resource)
                self._set_data("warehouse", warehouse)

                # –ï—Å–ª–∏ –≤–æ–¥—ã 0, –∂–¥—ë–º 10 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
                if water == 0:
                    logger.info("–í–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –æ–∂–∏–¥–∞–Ω–∏–µ 10 –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è 1 –∫–∞–ø–ª–∏")
                    self._set_data("greenhouse_active", False)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º
                    await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç = 600 —Å–µ–∫—É–Ω–¥
                    if self._get_data("greenhouse_manual_stop", False):
                        logger.info("–ê–≤—Ç–æ—Ñ–∞—Ä–º –æ—Å—Ç–∞—ë—Ç—Å—è –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –∏–∑-–∑–∞ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                        break
                    water += 1  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 1 –∫–∞–ø–ª—è –Ω–∞–∫–æ–ø–∏–ª–∞—Å—å
                    self._set_data("water", water)
                    self._set_data("greenhouse_active", True)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º
                    logger.info(f"–í–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {water}, –∞–≤—Ç–æ—Ñ–∞—Ä–º –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω")
                    continue

                # –í—ã—Ä–∞—â–∏–≤–∞–µ–º –∫—É–ª—å—Ç—É—Ä—É (–±–µ–∑ —ç–º–æ–¥–∑–∏)
                await asyncio.sleep(1.5)
                await conv.send_message(f"–≤—ã—Ä–∞—Å—Ç–∏—Ç—å {resource}")
                try:
                    response = await asyncio.wait_for(conv.get_response(), timeout=5)
                except asyncio.TimeoutError:
                    logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏ –∫—É–ª—å—Ç—É—Ä—ã")
                    continue
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏ –∫—É–ª—å—Ç—É—Ä—ã: {e}")
                    continue

                if "—É—Å–ø–µ—à–Ω–æ –≤—ã—Ä–∞—Å—Ç–∏–ª(-–∞)" in response.raw_text:
                    water -= 1
                    warehouse[resource_key] += 1
                    self._set_data("warehouse", warehouse)
                    self._set_data("water", water)
                    logger.info(f"–í—ã—Ä–∞—â–µ–Ω–∞ {resource}, –≤–æ–¥–∞: {water}, —Å–∫–ª–∞–¥: {warehouse[resource_key]}")
                elif "—É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç" in response.raw_text:
                    logger.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ 10 –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è 1 –∫–∞–ø–ª–∏")
                    self._set_data("greenhouse_active", False)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º
                    await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç = 600 —Å–µ–∫—É–Ω–¥
                    if self._get_data("greenhouse_manual_stop", False):
                        logger.info("–ê–≤—Ç–æ—Ñ–∞—Ä–º –æ—Å—Ç–∞—ë—Ç—Å—è –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –∏–∑-–∑–∞ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                        break
                    water += 1  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 1 –∫–∞–ø–ª—è –Ω–∞–∫–æ–ø–∏–ª–∞—Å—å
                    self._set_data("water", water)
                    self._set_data("greenhouse_active", True)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º
                    logger.info(f"–í–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {water}, –∞–≤—Ç–æ—Ñ–∞—Ä–º –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω")
                    continue

                await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏

        return False

    def extract_profile_data(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
        data = {}
        for key, pattern in self.regexes.items():
            match = re.search(pattern, text)
            if key in ['bottles', 'bb_coins', 'gpoints']:
                data[key] = match.group(1) if match and match.group(1) else match.group(2) if match else "0"
            else:
                data[key] = match.group(1) if match else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        return data

    def get_vip_status(self, text, is_premium):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ VIP-—Å—Ç–∞—Ç—É—Å–∞"""
        if "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏èVIP4‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è" in text:
            return self.strings["vip4_premium" if is_premium else "vip4"]
        elif "üíéüíéüíéVIP3üíéüíéüíé" in text:
            return self.strings["vip3_premium" if is_premium else "vip3"]
        elif re.search(r"üî•üî•üî•?VIP2üî•üî•üî•?", text):
            return self.strings["vip2_premium" if is_premium else "vip2"]
        elif "‚ö°Ô∏èVIP1‚ö°Ô∏è" in text:
            return self.strings["vip1_premium" if is_premium else "vip1"]
        return ""

    def get_admin_status(self, text, is_premium):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞"""
        if "üíª –¢–µ—Ö. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üíª" in text:
            return self.strings["admin_tech_premium" if is_premium else "admin_tech"]
        elif "üòà –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ñ.—á–∞—Ç–∞ üòà" in text:
            return self.strings["admin_chat_premium" if is_premium else "admin_chat"]
        return ""
