__version__ = (7, 7, 7)         
# meta developer:@Yaukais, @Shadow_red1, @familiarrrrrr
#         ‚ï≠‚ïê‚ïê‚Ä¢ ‡≥ã‚Ä¢‚úß‡πë‚ô°‡πë‚úß‚Ä¢‡≥ã ‚Ä¢‚ïê‚ïê‚ïÆ
#                  @Yaukais
#               ‚ïî‚ïê‚ïê‚ïó‚ïî‚ïó ‚ô° ‚ô° ‚ô°  
#               ‚ïö‚ïó‚ïî‚ïù‚ïë‚ïë‚ïî‚ïê‚ï¶‚ï¶‚ï¶‚ïî‚ïó
#               ‚ïî‚ïù‚ïö‚ïó‚ïë‚ïö‚ï£‚ïë‚ïë‚ïë‚ïë‚ïî‚ï£  
#               ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ï©‚ïê‚ï©‚ïê‚ï©‚ïê‚ïù     
#                   ‚ïî‚ïê‚ïê‚ïê‚ïó‚ô™
#                   ‚ïë‚ñà‚ñà‚ñà‚ïë ‚ô´
#                   ‚ïë(‚óè)‚ïë‚ô´
#                   ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ô™
#              ‡Æú€û‡Æú YOU ‡Æú€û‡Æú
#              ‚û∫íã®MùôÄ∆¨ùôÑ”®RíÜô‚û§
#         ‚ï∞‚ïê‚ïê‚Ä¢ ‡≥ã‚Ä¢‚úß‡πë‚ô°‡πë‚úß‚Ä¢‡≥ã ‚Ä¢‚ïê‚ïê‚ïØ

import asyncio
from telethon.tl.types import Message
from telethon import events
from .. import loader, utils
from telethon import functions, types
from ..inline.types import InlineCall

class ClanTreasuryMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∑–Ω–æ–π –∫–ª–∞–Ω–∞ –≤ –±–æ—Ç–µ @bforgame_bot. –ü–æ–º–æ—à—å –ø–æ –º–æ–¥—É–ª—é —Ç—É—Ç https://t.me/szadow_mod777"""
    strings = {"name": "ClanTreasury_Ghost"}

    _bot = "@bforgame_bot"

    async def –∫–∞–∑–Ω–∞cmd(self, message: Message):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞."""
        async with self._client.conversation(self._bot) as conv:
            await conv.send_message("–ú–æ–π –∫–ª–∞–Ω")
            response = await conv.get_response(timeout=5)
            if response is None:
                await conv.send_message("–ú–æ–π –∫–ª–∞–Ω")
                response = await conv.get_response(timeout=5)
                if response is None:
                    await message.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ.")
                    return

            info_text = response.raw_text
            members_count = int(info_text.split(" –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ")[1].split("\n")[0])
            treasury = info_text.split(" –í –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞: ")[1].split("\n")[0]

            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É —Å –∫–æ–ª–ª–±–µ–∫–æ–º clanMembers
            for row in response.reply_markup.rows:
                for button in row.buttons:
                    if hasattr(button, 'data') and button.data.decode() == 'clanMembers':
                        await response.click(data=button.data)
                        break
                else:
                    continue
                break
            else:
                await message.edit("–ö–Ω–æ–ø–∫–∞ '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            members_response = await conv.get_response(timeout=5)
            if members_response is None:
                await message.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∫–ª–∞–Ω–∞.")
                return

            members_info = members_response.raw_text.split("\n")[1:]
            members = []
            for member in members_info:
                name = member.split("] | [")[1].split(" (")[0]
                member_id = member.split("(")[1].split(")")[0]
                members.append({"name": name, "id": member_id, "today_contribution": 0})

            self.members = members
            self.treasury = treasury
            self.total_contribution = 0

            await self.show_treasury(message)

    async def show_treasury(self, message: Message):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞."""
        members_list = "\n".join(
            [f" | {i + 1}‚Ññ - {member['today_contribution']} "
             for i, member in enumerate(self.members)])

        treasury_message = f"""  –ö–∞–∑–Ω–∞ –∫–ª–∞–Ω–∞ !!!
‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
‚õµÔ∏è–í—Å—ë —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞:

{members_list}

‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
‚õµÔ∏è–í –∫–∞–∑–Ω–µ –≤ –æ–±—â–µ–º:
 | {self.total_contribution}  /  {self.treasury}

"""
        await self.inline.form(
            text=treasury_message,
            message=message,
            reply_markup=[[{"text": "  –¢–æ–ø –ø–æ –≤–∫–ª–∞–¥—É ", "callback": self.show_top}]]
        )

    async def show_top(self, call: InlineCall):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –≤–∫–ª–∞–¥—É."""
        sorted_members = sorted(self.members, key=lambda x: x["today_contribution"], reverse=True)
        top_list = "\n".join(
            [f" | {i + 1}‚Ññ - {member['today_contribution']} "
             for i, member in enumerate(sorted_members)])

        top_message = f"""  –ö–∞–∑–Ω–∞ –∫–ª–∞–Ω–∞ !!!
‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
‚õµÔ∏è | –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞ –ø–æ –∫–∞–∑–Ω–µ:

{top_list}

‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
‚õµÔ∏è–í –∫–∞–∑–Ω–µ –≤ –æ–±—â–µ–º:
 | {self.total_contribution}  /  {self.treasury}

"""
        await call.edit(
            text=top_message,
            reply_markup=[[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self.show_treasury}]]
        )